In a deck of cards, each card has an integer written on it.
Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:
Each group has exactly X cards.
All the cards in each group have the same integer.
Example 1:
Input: [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4]

Example 2:
Input: [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.

Example 3:
Input: [1]
Output: false
Explanation: No possible partition.

Example 4:
Input: [1,1]
Output: true
Explanation: Possible partition [1,1]

Example 5:
Input: [1,1,2,2,2,2]
Output: true
Explanation: Possible partition [1,1],[2,2],[2,2]

 
Note:
1 <= deck.length <= 10000
0 <= deck[i] < 10000

Solution:

Greatest Common Divisor

import java.util.*;
class Solution {
    public boolean hasGroupsSizeX(int[] deck) {
        if (deck.length >= 2) {
            HashMap <Integer, Integer> map = new HashMap <Integer, Integer>();
            
            // first pass
            for (int i : deck){
                if (map.containsKey(i)){
                    map.put(i, map.get(i)+1);
                } else{
                    map.put(i, 1);
                }
            }
            
            //second pass
            int q = map.get(deck[0]);
            for (int i : deck){
                if (gcd(map.get(i),q) <= 1){
                    return false;
                }
            }
            return true;
            
        } else {
            return false;
        }
    }
    
    public int gcd(int a, int b) {
        
            if (a == 1){
                return 1;
            } else if (b == 1){
                return 1;
            }
            if (a == b){
                return a;
            }
            if (a > b){
                return gcd(a-b, b);
            } 
            return gcd(a, b-a);
        
    }
}
